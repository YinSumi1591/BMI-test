import streamlit as st
import io
import requests
from pathlib import Path

st.set_page_config(page_title='BODY MASS UNDEX : Web Application',page_icon='üèãÔ∏è')
st.header('*‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Æ‡∏±‡∏ö*')
st.header('**‡∏°‡∏≤‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤ BMI ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡∏Å‡∏±‡∏ô**')

st.image('BMI.jpg')

col1,col2 = st.columns(2)
with col1:
    if st.button('‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á Murder Drone - Bite Me'):
        st.video('https://youtu.be/D7_2_j6-VfQ')
with col2:
    if st.button('‡∏ü‡∏±‡∏á meme (Warning:Brainrot)'):
        st.video('https://www.youtube.com/shorts/5fOIjOgqmvw?feature=share')

st.info("‡∏ú‡∏≠‡∏°")
st.success("‡∏õ‡∏Å‡∏ï‡∏¥")
st.warning("‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 1")
st.error("‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 2 (‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏µ‡∏™‡πâ‡∏°)")
st.error("‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 3")

kg=st.number_input("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å(kg): ")
cm=st.number_input("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á(cm):")

if st.button('‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì'):
    if kg != 0 and cm !=0:
        bmi = kg / (cm/100)** 2
        tt = f'‡∏Ñ‡πà‡∏≤ BMI ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ {bmi:.2f}'
        if bmi < 18.90:
            st.info(tt)
            st.image('BMI-Underweight.png')
            word="‡∏ú‡∏≠‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"
        elif bmi < 23:
            st.success(tt)
            st.image('BMI-Normal.png')
            word="‡∏õ‡∏Å‡∏ï‡∏¥"
        elif bmi < 25:
            st.warning(tt)
            st.image('BMI-Overweight.png')
            word="‡∏≠‡πâ‡∏ß‡∏ô‡∏ô‡∏¥‡∏î‡πÜ"
        elif bmi < 30:
            st.error(tt)
            st.image('BMI-Obese.png')
            word="‡∏≠‡πâ‡∏ß‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πà‡∏≠‡∏¢"
        else:
            st.error(tt)
            st.image('BMI-Extremely Obese.png')
            word="‡∏°‡∏∂‡∏á‡∏≠‡πâ‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏ß"
    else: st.error("PLEASE! go type your bmi numbers before press 'Button' here.")

API_URL = "https://api-voice.botnoi.ai/openapi/v1/generate_audio"
API_TOKEN = "SGsxeUd1wXuiu2UnLlakaNJHd4bbynSj"

generate_btn = st.button("Generate Voice")

if generate_btn:
    payload = {
        "text": word,
        "speaker": speaker_id,
        "volume": 1,
        "speed": 1,
        "type_media": "mp3",
        "save_file": "true",
        "language": "th",
        "page": "user"
    }

    headers = {
        "accept": "application/json",
        "Content-Type": "application/json",
        "botnoi-token": API_TOKEN
    }

    try:
        res = requests.post(API_URL, json=payload, headers=headers, timeout=30)
        res.raise_for_status()
        data = res.json()
        st.write("API Response:", data)

        # ‡∏î‡∏∂‡∏á URL ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        audio_url = (
            data.get("url")
            or data.get("audio_url")
            or (data.get("data") or {}).get("url")
        )

        if audio_url:
            audio_bytes = requests.get(audio_url, timeout=30).content
            out_path = Path("botnoi_voice.mp3")
            out_path.write_bytes(audio_bytes)
            st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚Üí {out_path.resolve()}")
            st.audio(audio_bytes, format="audio/mp3")
        else:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô response")

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        

